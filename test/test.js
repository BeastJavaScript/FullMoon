// Generated by CoffeeScript 1.7.1
(function() {
  var Directive, NeedDirective, TestCase, TestDirective, TestNeedDirective,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TestCase = require("beast-test").TestCase;

  NeedDirective = require("../lib/Application.js").NeedDirective;

  new (TestNeedDirective = (function(_super) {
    __extends(TestNeedDirective, _super);

    function TestNeedDirective() {
      TestNeedDirective.__super__.constructor.call(this);
    }

    TestNeedDirective.prototype.base = function() {
      var d;
      return d = new NeedDirective("fake", "fake");
    };

    TestNeedDirective.prototype.testAbstractClass = function(obj) {
      return this.assertNotNull(obj);
    };

    return TestNeedDirective;

  })(TestCase));

  TestCase = require("beast-test").TestCase;

  Directive = require("../lib/Application.js").Directive;

  new (TestDirective = (function(_super) {
    __extends(TestDirective, _super);

    function TestDirective() {
      TestDirective.__super__.constructor.call(this);
    }

    TestDirective.prototype.base = function() {
      var d, e;
      try {
        d = new Directive("fake", "fake");
      } catch (_error) {
        e = _error;
        return e;
      }
      return d;
    };

    TestDirective.prototype.testAbstractClass = function(obj) {
      return this.assertEquals(obj.message, "Class Directive is an Abstract Class");
    };

    return TestDirective;

  })(TestCase));

  console.log(TestCase.getResult());

}).call(this);
