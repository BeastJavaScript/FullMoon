// Generated by CoffeeScript 1.7.1
(function() {
  var Directive, DirectoryManager, NeedDirective, ParentDirective, RepeatDirective, SectionDirective,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Directive = (function() {
    function Directive(symbol, input) {
      this.symbol = symbol;
      this.input = input;
      if (this.constructor === Directive) {
        throw new Error("Class Directive is an Abstract Class");
      }
      this["static"] = this.constructor;
      if (this.input !== null) {
        this.regex = new RegExp("#" + this.symbol + " " + this.input);
      } else {
        this.regex = new RegExp("#" + this.symbol);
      }
    }

    Directive.prototype.canHandle = function(text) {
      var result;
      if ((result = this.regex.exec(text)) !== null) {
        return true;
      } else {
        return false;
      }
    };

    Directive.prototype.getDirective = function(text) {
      var key, result, string, stringSplit, value;
      result = this.regex.exec(text);
      string = result[0];
      stringSplit = string.split(" ");
      key = stringSplit.unshift();
      value = stringSplit.join(" ");
      return {
        key: value
      };
    };

    return Directive;

  })();

  exports.Directive = Directive;

  DirectoryManager = (function() {
    function DirectoryManager(fileManager) {
      this.fileManager = fileManager;
      this.that = this;
      this.files = [];
      this.dirRead = require('node-dir');
      this.add = this.add.bind(this);
      this.loadFiles = this.loadFiles.bind(this);
    }

    DirectoryManager.prototype.watchDirectory = function() {};

    DirectoryManager.prototype.loadFiles = function(directory, match, exclude, callback2) {
      var callback;
      if (match == null) {
        match = null;
      }
      if (exclude == null) {
        exclude = null;
      }
      if (callback2 == null) {
        callback2 = null;
      }
      callback = function(err, files) {
        var file, _i, _len;
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (match === null || (new RegExp(match)).exec(file)) {
            if (exclude === null || (new RegExp(exclude)).exec(file) === null) {
              this.add(file);
            }
          }
        }
        if (callback2 !== null) {
          return callback2.call();
        }
      };
      callback = callback.bind(this);
      return this.dirRead.files(directory, callback);
    };

    DirectoryManager.prototype.add = function(file) {
      return this.files.push(file);
    };

    DirectoryManager.prototype.toString = function() {
      return "[DirectoryManager]";
    };

    return DirectoryManager;

  })();

  exports.DirectoryManager = DirectoryManager;

  SectionDirective = (function(_super) {
    __extends(SectionDirective, _super);

    function SectionDirective() {
      SectionDirective.__super__.constructor.call(this, "section", "[^ ]+");
    }

    return SectionDirective;

  })(Directive);

  exports.SectionDirective = SectionDirective;

  RepeatDirective = (function(_super) {
    __extends(RepeatDirective, _super);

    function RepeatDirective() {
      RepeatDirective.__super__.constructor.call(this, "repeat", "[0-9]+");
    }

    return RepeatDirective;

  })(Directive);

  exports.RepeatDirective = RepeatDirective;

  ParentDirective = (function(_super) {
    __extends(ParentDirective, _super);

    function ParentDirective() {
      ParentDirective.__super__.constructor.call(this, "parent", "[^ ]+");
    }

    return ParentDirective;

  })(Directive);

  exports.ParentDirective = ParentDirective;

  NeedDirective = (function(_super) {
    __extends(NeedDirective, _super);

    function NeedDirective() {
      NeedDirective.__super__.constructor.call(this, "need", "[^ ]+");
    }

    return NeedDirective;

  })(Directive);

  exports.NeedDirective = NeedDirective;

}).call(this);
